// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YouShowService.Infrastructure;

#nullable disable

namespace YouShowService.Infrastructure.Migrations
{
    [DbContext(typeof(YouShowDbContext))]
    [Migration("20240620092513_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("YouShowService.Domain.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("PublishAddress")
                        .HasColumnType("longtext");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int");

                    b.Property<long>("ShowId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserAvatarURL")
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("T_Comment", (string)null);
                });

            modelBuilder.Entity("YouShowService.Domain.Entities.CommentLikeUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("UserId", "CommentId")
                        .IsUnique();

                    b.ToTable("T_CommentLikeUser", (string)null);
                });

            modelBuilder.Entity("YouShowService.Domain.Entities.Reply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("PublishAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("ToUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserAvatarURL")
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("T_Reply", (string)null);
                });

            modelBuilder.Entity("YouShowService.Domain.Entities.ReplyLikeUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReplyId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "ReplyId");

                    b.HasIndex("UserId", "ReplyId")
                        .IsUnique();

                    b.ToTable("T_ReplyLikeUser", (string)null);
                });

            modelBuilder.Entity("YouShowService.Domain.Entities.YouShow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("LikeUsers")
                        .HasColumnType("longtext");

                    b.Property<string>("PublishAddress")
                        .HasColumnType("longtext");

                    b.Property<int>("ShareCount")
                        .HasColumnType("int");

                    b.Property<int>("StarCount")
                        .HasColumnType("int");

                    b.Property<string>("UserAvatarURL")
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("T_YouShow", (string)null);
                });

            modelBuilder.Entity("YouShowService.Domain.Entities.YouShowFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FirstURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecondURL")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("YouShowId")
                        .HasColumnType("bigint");

                    b.Property<int>("sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YouShowId");

                    b.ToTable("T_YouShowFile", (string)null);
                });

            modelBuilder.Entity("YouShowService.Domain.Entities.YouShowLikeUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("YouShowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "YouShowId")
                        .IsUnique();

                    b.ToTable("T_YouShowLikeUser", (string)null);
                });

            modelBuilder.Entity("YouShowService.Domain.Entities.YouShowStarUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("YouShowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "YouShowId")
                        .IsUnique();

                    b.ToTable("T_YouShowStarUser", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
